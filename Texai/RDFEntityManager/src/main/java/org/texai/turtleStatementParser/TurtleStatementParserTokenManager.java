/* Generated By:JavaCC: Do not edit this line. TurtleStatementParserTokenManager.java */
package org.texai.turtleStatementParser;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.apache.log4j.Logger;
import org.openrdf.model.Literal;
import org.openrdf.model.Resource;
import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.Value;
import org.openrdf.model.impl.BNodeImpl;
import org.openrdf.model.impl.ContextStatementImpl;
import org.openrdf.model.impl.LiteralImpl;
import org.openrdf.model.impl.NumericLiteralImpl;
import org.openrdf.model.impl.StatementImpl;
import org.openrdf.model.impl.URIImpl;
import org.texai.kb.Constants;
import org.texai.turtleStatementParser.misc.ParsedTurtleStatementHandler;
import org.texai.util.TexaiException;

public class TurtleStatementParserTokenManager implements TurtleStatementParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000000000L) != 0L)
            return 166;
         if ((active0 & 0x20000L) != 0L)
            return 159;
         if ((active0 & 0x40000L) != 0L)
            return 11;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 32;
            return 194;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 15;
         if ((active0 & 0x4000L) != 0L)
            return 195;
         return -1;
      case 1:
         if ((active0 & 0x80000L) != 0L)
            return 194;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 44:
         return jjStopAtPos(0, 15);
      case 45:
         return jjStartNfaWithStates_0(0, 18, 11);
      case 46:
         return jjStartNfaWithStates_0(0, 31, 15);
      case 58:
         return jjStopAtPos(0, 16);
      case 59:
         return jjStartNfaWithStates_0(0, 14, 195);
      case 60:
         return jjStartNfaWithStates_0(0, 42, 166);
      case 62:
         return jjStopAtPos(0, 43);
      case 63:
         return jjStartNfaWithStates_0(0, 17, 159);
      case 91:
         return jjStopAtPos(0, 12);
      case 93:
         return jjStopAtPos(0, 13);
      case 94:
         return jjMoveStringLiteralDfa1_0(0x700000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 123:
         return jjStopAtPos(0, 10);
      case 125:
         return jjStopAtPos(0, 11);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 94:
         return jjMoveStringLiteralDfa2_0(active0, 0x700000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 194);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa3_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa8_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa9_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa10_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa14_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 119:
         return jjMoveStringLiteralDfa15_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa16_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa17_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa20_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa21_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa22_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa23_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa24_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa25_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa26_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 88:
         return jjMoveStringLiteralDfa27_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa28_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa29_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private final int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa30_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private final int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa31_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private final int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa32_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private final int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private final int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa34_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private final int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa35_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private final int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa36_0(active0, 0x700000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private final int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa37_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa37_0(active0, 0x100000L);
      case 108:
         return jjMoveStringLiteralDfa37_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private final int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa38_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa38_0(active0, 0x600000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private final int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa39_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa39_0(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa39_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
private final int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(39, 20);
         break;
      case 98:
         return jjMoveStringLiteralDfa40_0(active0, 0x400000L);
      case 103:
         return jjMoveStringLiteralDfa40_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
private final int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(40, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa41_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
private final int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa42_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
private final int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(42, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 194;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 195:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 159:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 192;
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(189);
                  }
                  if ((0x8000001000000000L & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(160);
                  }
                  break;
               case 194:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 192;
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(189);
                  }
                  break;
               case 0:
                  if ((0xac009fda00000000L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 166;
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x8400800800000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  if ((0x28001fd200000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  else if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddTwoStates(12, 13);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddStates(15, 17);
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 159;
                  if ((0x8000001000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(18, 20);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  jjAddStates(21, 22);
                  break;
               case 7:
                  if (curChar == 35 && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(23, 25);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 21:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if (curChar == 39 && kind > 29)
                     kind = 29;
                  break;
               case 24:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 22);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 30:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 32:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 33:
                  if (curChar != 34)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar != 62)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(34);
                  break;
               case 42:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 52:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 61:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 68:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 75:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 81:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 91:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 100:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 103:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 107:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 114:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 119:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 129:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 130:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 50)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 138:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if (curChar == 51)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 141:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 145:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 152:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 154:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 155:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 156:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 157:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(155);
                  break;
               case 158:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 160:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(160);
                  break;
               case 161:
                  if ((0x8400800800000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 162:
                  if ((0x28001fd200000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 163:
                  if ((0xac009fda00000000L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 164:
                  if ((0x3ff601000000000L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 165:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 166:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 167:
                  if ((0xafffffda00000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 168:
                  if (curChar == 62 && kind > 44)
                     kind = 44;
                  break;
               case 169:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 9);
                  break;
               case 170:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(170, 171);
                  break;
               case 171:
                  if (curChar != 46)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(30, 32);
                  break;
               case 172:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(30, 32);
                  break;
               case 174:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(175);
                  break;
               case 175:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(175, 19);
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(176, 177);
                  break;
               case 178:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(179);
                  break;
               case 179:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(179, 19);
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 182:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(183);
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(183, 19);
                  break;
               case 184:
                  if (curChar != 48)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(15, 17);
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(186, 13);
                  break;
               case 187:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(187, 13);
                  break;
               case 188:
                  if ((0x8000001000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(18, 20);
                  break;
               case 189:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(189);
                  break;
               case 190:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  break;
               case 191:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 192:
                  if ((0x8000001000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(193);
                  break;
               case 193:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(193);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 195:
               case 1:
                  jjCheckNAddStates(0, 2);
                  break;
               case 159:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(160);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(189);
                  }
                  break;
               case 194:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(189);
                  }
                  break;
               case 0:
                  if ((0x47fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x28000001L & l) != 0L)
                  {
                     if (kind > 40)
                        kind = 40;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(18, 20);
                  }
                  else if ((0x28000001L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 5:
                  if (curChar == 124)
                     jjCheckNAddTwoStates(6, 8);
                  break;
               case 6:
                  if ((0xefffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(6, 8);
                  break;
               case 8:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 13:
                  if ((0x100000001000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 19:
                  if ((0x5000000050L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 23:
                  if (curChar == 92)
                     jjAddStates(38, 40);
                  break;
               case 24:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 30:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 31:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 32:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 34:
                  if (curChar == 94)
                     jjAddStates(44, 46);
                  break;
               case 36:
                  if (curChar == 101)
                     jjCheckNAdd(35);
                  break;
               case 37:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 58:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 63:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 71:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 103)
                     jjCheckNAdd(35);
                  break;
               case 78:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 82:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 97:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 102:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 104:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 110:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 116)
                     jjCheckNAdd(35);
                  break;
               case 117:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (curChar == 88)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 135:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 140:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 142:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 148:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 153:
                  if (curChar == 94)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 160:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(160);
                  break;
               case 161:
                  if ((0x28000001L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 163:
                  if ((0x28000001L & l) != 0L && kind > 40)
                     kind = 40;
                  break;
               case 164:
                  if ((0x47fffffe87fffffeL & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 166:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 167:
                  if ((0x47fffffeafffffffL & l) != 0L)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 173:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 177:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 181:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 185:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(186);
                  break;
               case 186:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddTwoStates(186, 13);
                  break;
               case 188:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(18, 20);
                  break;
               case 189:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(189);
                  break;
               case 190:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(190, 191);
                  break;
               case 192:
               case 193:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(193);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 195:
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(0, 2);
                  break;
               case 159:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(189);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAdd(160);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(190, 191);
                  break;
               case 194:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAdd(189);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(190, 191);
                  break;
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(18, 20);
                  }
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(21, 22);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 30:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               case 160:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(160);
                  break;
               case 164:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 41)
                     kind = 41;
                  break;
               case 166:
               case 167:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 188:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(18, 20);
                  break;
               case 189:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(189);
                  break;
               case 190:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(190, 191);
                  break;
               case 192:
               case 193:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(193);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 194 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 170, 171, 176, 177, 180, 181, 19, 30, 31, 33, 21, 23, 185, 
   187, 13, 189, 190, 191, 6, 8, 15, 16, 19, 30, 31, 155, 33, 172, 173, 
   19, 180, 181, 19, 17, 18, 24, 25, 27, 32, 154, 156, 76, 115, 153, 174, 
   175, 178, 179, 182, 183, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\72", "\77", "\55", "\151\156", 
"\136\136\74\150\164\164\160\72\57\57\167\167\167\56\167\63\56\157\162\147\57\62\60\60\61\57\130\115\114\123\143\150\145\155\141\43\151\156\164\76", 
"\136\136\74\150\164\164\160\72\57\57\167\167\167\56\167\63\56\157\162\147\57\62\60\60\61\57\130\115\114\123\143\150\145\155\141\43\154\157\156\147\76", 
"\136\136\74\150\164\164\160\72\57\57\167\167\167\56\167\63\56\157\162\147\57\62\60\60\61\57\130\115\114\123\143\150\145\155\141\43\144\157\165\142\154\145\76", null, null, null, null, null, null, null, null, "\56", null, null, null, null, 
null, null, null, null, null, null, "\74", "\76", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x1ff3e8ffff01L, 
};
static final long[] jjtoSkip = {
   0xfeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[194];
private final int[] jjstateSet = new int[388];
protected char curChar;
public TurtleStatementParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public TurtleStatementParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 194; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
