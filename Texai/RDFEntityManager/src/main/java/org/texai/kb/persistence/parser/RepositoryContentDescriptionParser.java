/* Generated By:JavaCC: Do not edit this line. RepositoryContentDescriptionParser.java */
package org.texai.kb.persistence.parser;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.util.HashSet;
import java.util.Set;
import org.apache.log4j.Logger;
import org.openrdf.model.URI;
import org.openrdf.model.impl.URIImpl;
import org.texai.kb.Constants;
import org.texai.kb.persistence.domainEntity.RepositoryContentDescription;
import org.texai.kb.persistence.domainEntity.RepositoryContentDescriptionItem;
import org.texai.util.TexaiException;

/**  Provides a javacc-generated parser for RDF repository content descriptions. */
@SuppressWarnings("unchecked")
public class RepositoryContentDescriptionParser implements RepositoryContentDescriptionParserConstants {
  /** the log4j logger */
  private static final Logger LOGGER = Logger.getLogger(RepositoryContentDescriptionParser.class.getName());

  /** Returns a RDF repository description parser for the given string.
   * @param string the given repository description string
   * @return a RDF repository description parser for the given string
   */
  public static RepositoryContentDescriptionParser makeRepositoryContentDescriptionParser(final String string) {
    //Preconditions
    assert string != null : "string must not be null";
    assert !string.isEmpty() : "string must not be empty";

    final RepositoryContentDescriptionParser repositoryContentDescriptionParser = new RepositoryContentDescriptionParser(new BufferedInputStream(new ByteArrayInputStream(string.getBytes())));
    return repositoryContentDescriptionParser;
  }

/* GRAMMAR PRODUCTIONS */
  final public Set<RepositoryContentDescription> parseInput() throws ParseException {
 final Set<RepositoryContentDescription> rdfRepositories = new HashSet<RepositoryContentDescription>();
 RepositoryContentDescription repositoryContentDescription;
    jj_consume_token(LPAREN);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      repositoryContentDescription = RepositoryContentDescription();
     if (rdfRepositories.contains(repositoryContentDescription)) {
       {if (true) throw new TexaiException("only one RDF repository description may be named: " + repositoryContentDescription.getRepositoryName());}
     } else {
       rdfRepositories.add(repositoryContentDescription);
     }
    }
    jj_consume_token(RPAREN);
    jj_consume_token(0);
    {if (true) return rdfRepositories;}
    throw new Error("Missing return statement in function");
  }

  final public RepositoryContentDescription RepositoryContentDescription() throws ParseException {
  String repositoryName;
  String indices;
  RepositoryContentDescriptionItem repositoryContentDescriptionItem;
  Set<RepositoryContentDescriptionItem> repositoryContentDescriptionItems = new HashSet<RepositoryContentDescriptionItem>();
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
    repositoryName=token.image;
    indices = Indices();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      repositoryContentDescriptionItem = RepositoryContentDescriptionItem();
     if (repositoryContentDescriptionItems.contains(repositoryContentDescriptionItem)) {
       {if (true) throw new TexaiException("duplicate RepositoryContentDescriptionItem: " + repositoryContentDescriptionItem.getClassTerm());}
     } else {
       repositoryContentDescriptionItems.add(repositoryContentDescriptionItem);
     }
    }
    jj_consume_token(RPAREN);
    {if (true) return new RepositoryContentDescription(repositoryName, indices, repositoryContentDescriptionItems);}
    throw new Error("Missing return statement in function");
  }

  final public String Indices() throws ParseException {
  String indices;
    jj_consume_token(LPAREN);
    jj_consume_token(INDICES);
    jj_consume_token(INDEX_LITERAL);
      indices = token.image.substring(1, token.image.length() - 1);
    jj_consume_token(RPAREN);
    {if (true) return indices;}
    throw new Error("Missing return statement in function");
  }

  final public RepositoryContentDescriptionItem RepositoryContentDescriptionItem() throws ParseException {
  URI classTerm = null;
    jj_consume_token(LPAREN);
    jj_consume_token(CLASS_NAME);
    jj_consume_token(IDENTIFIER);
      classTerm = new URIImpl(Constants.TEXAI_NAMESPACE + token.image);
    jj_consume_token(RPAREN);
    {if (true) return new RepositoryContentDescriptionItem(classTerm);}
    throw new Error("Missing return statement in function");
  }

  public RepositoryContentDescriptionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100,0x100,};
   }

  public RepositoryContentDescriptionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public RepositoryContentDescriptionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RepositoryContentDescriptionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public RepositoryContentDescriptionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RepositoryContentDescriptionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public RepositoryContentDescriptionParser(RepositoryContentDescriptionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  public void ReInit(RepositoryContentDescriptionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[18];
    for (int i = 0; i < 18; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
