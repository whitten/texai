/*
 * RepositoryContentDescriptionParser.jj
 *
 * Created on Mayr 26, 2009, 11:14 AM
 *
 * Description: Provides lexicon and grammar for the RDF Repository content descriptions,
 * from which javacc generates a parser.
 *
 * Copyright (C) 2009 Stephen L. Reed.
 */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(RepositoryContentDescriptionParser)
package org.texai.kb.persistence.parser;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.util.HashSet;
import java.util.Set;
import org.apache.log4j.Logger;
import org.openrdf.model.URI;
import org.openrdf.model.impl.URIImpl;
import org.texai.kb.Constants;
import org.texai.kb.persistence.domainEntity.RepositoryContentDescription;
import org.texai.kb.persistence.domainEntity.RepositoryContentDescriptionItem;
import org.texai.util.TexaiException;

/**  Provides a javacc-generated parser for RDF repository content descriptions. */
@SuppressWarnings("unchecked")
public class RepositoryContentDescriptionParser {
  /** the log4j logger */
  private static final Logger LOGGER = Logger.getLogger(RepositoryContentDescriptionParser.class.getName());

  /** Returns a RDF repository description parser for the given string.
   * @param string the given repository description string
   * @return a RDF repository description parser for the given string
   */
  public static RepositoryContentDescriptionParser makeRepositoryContentDescriptionParser(final String string) {
    //Preconditions
    assert string != null : "string must not be null";
    assert !string.isEmpty() : "string must not be empty";

    final RepositoryContentDescriptionParser repositoryContentDescriptionParser = new RepositoryContentDescriptionParser(new BufferedInputStream(new ByteArrayInputStream(string.getBytes())));
    return repositoryContentDescriptionParser;
  }

}
PARSER_END(RepositoryContentDescriptionParser)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
|  <";" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"#|" (~["|"])* "|#">}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
}

/* TOKENS */

TOKEN :
{
  < CLASS_NAME: "className:" >
| < INDICES: "indices:" >
| < DOT: "." >
| < DASH: "-" >
}

/* LITERALS */
TOKEN :
{
  < INDEX_LITERAL:
      "\""
      ("spoc,posc,opsc,cosp" | "spoc,posc,opsc" | "spoc,posc"| "spoc,opsc")
      "\""
  >
}


/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|<DASH>|<DOT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* GRAMMAR PRODUCTIONS */

Set<RepositoryContentDescription> parseInput():
{
 final Set<RepositoryContentDescription> rdfRepositories = new HashSet<RepositoryContentDescription>();
 RepositoryContentDescription repositoryContentDescription;
}
{
  <LPAREN>
  (
   repositoryContentDescription=RepositoryContentDescription()
   {
     if (rdfRepositories.contains(repositoryContentDescription)) {
       throw new TexaiException("only one RDF repository description may be named: " + repositoryContentDescription.getRepositoryName());
     } else {
       rdfRepositories.add(repositoryContentDescription);
     }
   }
  )*
  <RPAREN>
  <EOF>
  {
    return rdfRepositories;
  }
}

RepositoryContentDescription RepositoryContentDescription():
{
  String repositoryName;
  String indices;
  RepositoryContentDescriptionItem repositoryContentDescriptionItem;
  Set<RepositoryContentDescriptionItem> repositoryContentDescriptionItems = new HashSet<RepositoryContentDescriptionItem>();
}
{
  <LPAREN> <IDENTIFIER>
  {
    repositoryName=token.image;
  }
  indices=Indices()
  (
   repositoryContentDescriptionItem=RepositoryContentDescriptionItem()
   {
     if (repositoryContentDescriptionItems.contains(repositoryContentDescriptionItem)) {
       throw new TexaiException("duplicate RepositoryContentDescriptionItem: " + repositoryContentDescriptionItem.getClassTerm());
     } else {
       repositoryContentDescriptionItems.add(repositoryContentDescriptionItem);
     }
   }
  )*
  <RPAREN>
  {
    return new RepositoryContentDescription(repositoryName, indices, repositoryContentDescriptionItems);
  }
}

String Indices():
{
  String indices;
}
{
  <LPAREN>
  (
    <INDICES> <INDEX_LITERAL>
    {
      indices = token.image.substring(1, token.image.length() - 1);
    }
  )
  <RPAREN>
  {
    return indices;
  }
}

RepositoryContentDescriptionItem RepositoryContentDescriptionItem():
{
  URI classTerm = null;
}
{
  <LPAREN>
  (
    <CLASS_NAME> <IDENTIFIER>
    {
      classTerm = new URIImpl(Constants.TEXAI_NAMESPACE + token.image);
    }
  )
  <RPAREN>
  {
    return new RepositoryContentDescriptionItem(classTerm);
  }
}
