<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="content-type" content="text/html; charset=utf-8" /><title /><meta name="generator" content="StarOffice/OpenOffice.org XSLT (http://xml.openoffice.org/sx2ml)" /><meta name="created" content="2006-11-20T12:04:11" /><meta name="changed" content="2007-10-10T13:45:03" /><base href="." /><style type="text/css">
	@page { size: 8.5inch 11inch; margin-top: 0.7874inch; margin-bottom: 0.7874inch; margin-left: 0.7874inch; margin-right: 0.7874inch }
	table { border-collapse:collapse; border-spacing:0; empty-cells:show }
	td, th { vertical-align:top; }
	h1, h2, h3, h4, h5, h6 { clear:both }
	ol, ul { padding:0; }
	* { margin:0; }
	*.Frame { font-size:12pt; margin-left:0.0791in; margin-right:0.0791in; margin-top:0.0791in; margin-bottom:0.0791in; vertical-align:top; text-align:center; padding:0.0591in; border-width:0.0133cm; border-style:solid; border-color:#000000; }
	*.Caption { font-family:'Thorndale AMT'; font-size:12pt; margin-top:0.0835in; margin-bottom:0.0835in; font-style:italic; }
	*.Framecontents { font-family:'Thorndale AMT'; font-size:12pt; margin-top:0in; margin-bottom:0.0835in; }
	*.Heading { font-family:'Albany AMT'; font-size:14pt; margin-top:0.1665in; margin-bottom:0.0835in; }
	*.Index { font-family:'Thorndale AMT'; font-size:12pt; }
	*.List { font-family:'Thorndale AMT'; font-size:12pt; margin-top:0in; margin-bottom:0.0835in; }
	*.P1 { font-family:'Nimbus Sans L'; font-size:16pt; text-align:center ! important; }
	*.P10 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:bold; }
	*.P11 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P12 { font-family:Courier; font-size:11pt; margin-left:0.4925in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P13 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0.4925in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P14 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0.4925in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P15 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P16 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:bold; }
	*.P17 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P18 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0.4925in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P19 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0.4925in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P2 { font-family:'Nimbus Sans L'; font-size:12pt; text-align:center ! important; }
	*.P20 { font-family:Courier; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P21 { font-family:Courier; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P22 { font-family:Courier; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P23 { font-family:'Nimbus Sans L'; font-size:12pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P3 { font-family:'Nimbus Sans L'; font-size:11pt; text-align:left ! important; font-weight:bold; }
	*.P4 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; }
	*.P5 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P6 { font-family:'Nimbus Sans L'; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:bold; }
	*.P7 { font-family:'Thorndale AMT'; font-size:12pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; }
	*.P8 { font-family:Courier; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:normal; }
	*.P9 { font-family:Courier; font-size:11pt; margin-left:0in; margin-right:0in; text-align:left ! important; text-indent:0inch; font-weight:bold; }
	*.Standard { font-family:'Thorndale AMT'; font-size:12pt; }
	*.Textbody { font-family:'Thorndale AMT'; font-size:12pt; margin-top:0in; margin-bottom:0.0835in; }
	*.BulletSymbols { font-family:StarSymbol; font-size:9pt; }
	*.Internetlink { color:#000080; text-decoration:underline; }
	*.NumberingSymbols { }
	*.T1 { font-weight:normal; }
	*.T2 { font-family:'Nimbus Sans L'; font-size:11pt; font-weight:normal; }
	*.T3 { font-family:'Nimbus Sans L'; font-size:11pt; font-weight:normal; }
	*.T4 { font-style:italic; }
	*.T5 { font-weight:bold; }
	*.T6 { font-family:Courier; }
	*.T7 { font-size:11pt; }
	*.T8 { font-size:11pt; }
	</style></head><body dir="ltr"><p class="P1">Semantic Annotation for Persistence, </p><p class="P1">the Reference Manual </p><p class="P2">by  </p><p class="P2">Stephen L. Reed, Texai.org </p><p class="P2"> </p><p class="P3">Introduction </p><p class="P4">Semantically annotated Java domain entities can be persisted to, and loaded from the Sesame2 RDF store.  <span class="T1">Introduced in Java 1.5, annotations permit the tagging of classes, fields and methods with data that can be queried by the application at runtime.  Java Enterprise Edition and the Java Persistence API use annotations to designate the object-relational mapping (ORM) between Java objects and a relational database.  Texai elaborates a subset of these ORM annotations to perform mapping between Java objects and the Sesame2 RDF store. </span></p><p class="P5"> </p><p class="P6">Sesame </p><p class="P7"><span class="T2">The Sesame RDF Store is available at </span><a href="http://openrdf.org/"><span class="T3">OpenRDF.org</span></a><span class="T2">.  The Texai framework is compatible with Sesame version 2.   The Texai download contains the support jars required to run a local Sesame server.  To access the Sesame server through its web based RDF Workbench, the OpenRDF.org download for Sesame2 is required.</span></p><p class="P5"> </p><p class="P6">Semantic Annotation of a Simple POJO </p><p class="P5">Consider a simple Plain Old Java Object (POJO): </p><p class="P5"> </p><p class="P8">public class MyCar {</p><p class="P8">  String manufacturer;</p><p class="P8">  . . .</p><p class="P8">} </p><p class="P5" /><p class="P5">Let's apply semantic annotations that describe MyCar as a semantic web (RDF) class: </p><p class="P5"> </p><p class="P9">@RDFEntity(</p><p class="P9">namespaces={ </p><p class="P9">  @RDFNamespace(prefix="cyc", namespaceURI=Constants.CYC_NAMESPACE)},</p><p class="P9">subject="cyc:MyCar", subClassOf="cyc:Automobile", context="cyc:MyContext") </p><p class="P8">public class MyCar { </p><p class="P8">  private String manufacturer;</p><p class="P8">  . . .</p><p class="P8">} </p><p class="P5" /><p class="P5">These annotations define MyCar as a class in the <span class="T4">Cyc</span> RDF ontology, having the superclass <span class="T4">Automobile</span> and the context <span class="T4">MyContext</span>.  In addition to required semantic annotation at the class level, this framework also requires an ID field and annotation of each persistent field:</p><p class="P5"> </p><p class="P8">@RDFEntity( </p><p class="P8">namespaces={ </p><p class="P8">  @RDFNamespace(prefix="cyc", namespaceURI=Constants.CYC_NAMESPACE)},</p><p class="P8">subject="cyc:MyCar", subClassOf="cyc:Automobile", context="cyc:MyContext") </p><p class="P8">public class MyCar { </p><p class="P8">  <span class="T5">@Id</span></p><p class="P9">  private URI id;</p><p class="P8"> </p><p class="P8">   <span class="T5">@RDFProperty</span></p><p class="P8">  private String manufacturerName;</p><p class="P8">  . . .</p><p class="P8">} </p><p class="P8"> </p><p class="P5">These annotations define <span class="T4">id</span> as the id field, and  <span class="T4">manufacturerName</span> as a field to be persisted for instances of MyCar.  RDFEntityManager is the framework class for persisting and loading RDF entities.  To construct an  RDFEntityManager instance we need a Sesame repository instance:</p><p class="P5"> </p><p class="P8">    Repository repository = new SailRepository(new NativeStore(</p><p class="P8">      new File("path-to-my-repository-directory"), </p><p class="P8">      "spoc,posc"));</p><p class="P8">    try {</p><p class="P8">      repository.initialize();</p><p class="P8">    } catch (RepositoryException ex) {</p><p class="P8">      ex.printStackTrace();</p><p class="P8">    }</p><p class="P8">    rdfEntityManager = new RDFEntityManager(repository);</p><p class="P8"> </p><p class="P5">Assuming that a constructor for MyCar accepts manufacturerName as its parameter, we can construct and persist a MyCar instance as follows: </p><p class="P5"> </p><p class="P8">   MyCar myCar = new MyCar(“Toyota”);</p><p class="P8">   rdfEntityManager.persist(myCar);</p><p class="P8"> </p><p class="P5">If cyc:MyCar is not already a defined RDF class in the Sesame RDF repository, then its defining statements will be automatically added from the @RDFEntity annotation on the MyCar Java class.  Then statements will be added that define the myCar instance and the value of its  manufacturerName field.  During its first persistence operation, the Java instance will be given an Id value.  RDF entities may be retrieved from the Sesame RDF store by ID, by a field value, or by an iterator over all instances of a given class.  To retrieve by field value for example:</p><p class="P5"> </p><p class="P8">   URI predicate = rdfEntityManager.createURI(</p><p class="P8">     Constants.CYC_NAMESPACE + “manufacturerName”);</p><p class="P8">   Value rdfValue =  rdfEntityManager.getValueFactory()</p><p class="P8">     .createLiteral(“Toyota”);</p><p class="P8">   List&lt;MyCar&gt; someCars = rdfEntityManager.find(</p><p class="P8">      predicate,</p><p class="P8">      rdfValue,</p><p class="P8">      MyCar.class);</p><p class="P8"> </p><p class="P5"> </p><p class="P6">@RDFEntity Annotation </p><p class="P5">This annotation is applied to the java entity class or super class, and has the following properties: </p><ul style="margin-left:1.25cm;"><li class="P10" style="margin-left:0cm;"><p class="P10" style="margin-left:0.25cm;">namespace<span class="T1"> - This optional property defines the default RDF namespace prefix for unqualified term names.</span></p></li><li class="P10" style="margin-left:0cm;"><p class="P10" style="margin-left:0.25cm;">subject <span class="T1">- This optional property defines the name of the associated RDF class and defaults to the qualified java class name prefixed by the default namespace.  It is used chiefly to map the annotated java class to an existing RDF class.</span></p></li><li class="P10" style="margin-left:0cm;"><p class="P10" style="margin-left:0.25cm;">type<span class="T1"> - This optional property defines the types of this entity.  Each value must specify an existing RDF class.</span><span class="T1">  This property should be specified for a new java class.</span></p></li><li class="P10" style="margin-left:0cm;"><p class="P10" style="margin-left:0.25cm;">subClassOf<span class="T1"> - This optional property defines the RDF super classes of this entity.  Each value must specify an existing RDF class.  This property should be specified for a new java class.</span></p></li><li class="P11" style="margin-left:0cm;"><p class="P11" style="margin-left:0.25cm;"><span class="T5">context</span> – This optional property defines the context in which the RDF statements are stored. If omitted, the persistence statements are not associated with a context.</p></li></ul><p class="P12" /><p class="P12">@RDFEntity(subject=Constants.TEXAI_NAMESPACE + "Friend",  </p><p class="P12">subClassOf={"Person"}, namespace=Constants.FOAF_NAMESPACE, context=Constants.TEXAI_NAMESPACE + "TestContext") </p><p class="P12">public class Friend extends Person { ... </p><p class="P12"> </p><p class="P6">@javax.persistence.Id Annotation </p><p class="P7"><span class="T2">This annotation is adopted from the Java Persistence API and </span><span class="T2">is applied to the field that contains the RDF entity identifier.  The supported field types are:</span></p><ul style="margin-left:0cm;"><li class="P13" style="margin-left:1.25cm;"><p class="P13" style="margin-left:0.25cm;">java.lang.String </p></li><li class="P13" style="margin-left:1.25cm;"><p class="P13" style="margin-left:0.25cm;">java.net.URI </p></li><li class="P13" style="margin-left:1.25cm;"><p class="P13" style="margin-left:0.25cm;">org.openrdf.model.URI </p></li></ul><p class="P14"> </p><p class="P12">@Id </p><p class="P12">private String termId; </p><p class="P12"> </p><p class="P6">@RDFProperty Annotation </p><p class="P5">This annotation is applied to the java entity fields and specifies the manner of the mapping between values of a particular field and the RDF statements that persist the value that the field contains.  Its properties are:</p><ul style="margin-left:1.25cm;"><li class="P10" style="margin-left:0cm;"><p class="P10" style="margin-left:0.25cm;">namespace<span class="T1"> - This optional property defines the RDF namespace prefix for predicates derived from the name of the annotated field. When present, it takes precedence over the @RDFEntity namespace annotation.</span></p></li></ul><ul style="margin-left:1.25cm;"><li class="P15" style="margin-left:0cm;"><p class="P15" style="margin-left:0.25cm;"><span class="T5">name</span> - This optional property defines the RDF predicate that is mapped to this association.  The default value is the name of the annotated field prefixed by the namespace.</p></li></ul><ul style="margin-left:1.25cm;"><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;">subPropertyOf<span class="T1"> - This optional property defines the RDF predicates for which this predicate is a specialization.  Each value must be an existing RDF predicate.</span><span class="T1">      </span></p></li></ul><ul style="margin-left:1.25cm;"><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;">domain<span class="T1"> - This optional property defines the type of the subject for this predicate.  The value must specify an existing class in the RDF store.  The default value is the class of the domain object that contains the field, prefixed by the namespace.</span></p></li></ul><ul style="margin-left:1.25cm;"><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;">range<span class="T1"> - This optional property defines the type of the objects for this predicate.  The value must specify an existing class in the RDF store.  Unqualified values are automatically prefixed with the namespace. The default value of this property is the class of field's value prefixed by the namespace</span><span class="T1">,</span><span class="T1"> or the corresponding XML schema datatype when applicable</span><span class="T1">. </span></p></li></ul><ul style="margin-left:1.25cm;"><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;">inverse<span class="T1"> - This property defines whether the predicate is an inverse predicate with respect to the annotated field, in which case the field value is mapped to the domain of the predicate and the java object is mapped to the range of the predicate.  The default value is </span>“false”<span class="T1">.</span></p></li><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;">fetch<span class="T1"> - This optional property is adopted from the Java Persistence API and defines whether the value of the field or property should be lazily loaded or must be eagerly fetched.  At present it is implemented only for collection valued fields.  Because loading all the collection field values of a persisted java entity can be time consuming, lazy loading is the more efficient alternative if the the loading effort can be postponed until the application actually requires the field values.  The allowed values are:</span></p><ul style="margin-left:0.75cm;"><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;"><span class="T1">j</span>avax.persistence.FetchType.LAZY<span class="T1">, which is the default</span></p></li><li class="P16" style="margin-left:0cm;"><p class="P16" style="margin-left:0.25cm;">javax.persistence.FetchType.EAGER<span class="T1">.  </span></p></li></ul></li><li class="P15" style="margin-left:0cm;"><p class="P15" style="margin-left:0.25cm;"><span class="T5">trueClass</span> – This optional property is only applicable for a boolean field.  It defines the name of the RDF class of which this object is an instance when the boolean association holds true. </p></li><li class="P15" style="margin-left:0cm;"><p class="P15" style="margin-left:0.25cm;"><span class="T5">falseClass</span> – This optional property is only applicable for a boolean field.  It defines the name of the RDF class of which this object is an instance when the boolean association holds false. </p></li></ul><p class="P14"> </p><p class="P14">Examples from the sample FOAF Agent class. </p><p class="P14"> </p><p class="P12">  /** the name of this agent  */</p><p class="P12">  <span class="T5">@RDFProperty</span></p><p class="P12">  private String name;</p><p class="P12">    </p><p class="P12">  /** the birthday of this Agent, represented in mm-dd string form, eg. '12-31'  */</p><p class="P12">  <span class="T5">@RDFProperty</span></p><p class="P12">  private String birthday;</p><p class="P12">    </p><p class="P12">  /** the gender of this Agent (typically but not necessarily 'male' or 'female')  */</p><p class="P12">  <span class="T5">@RDFProperty</span></p><p class="P12">  private String gender;</p><p class="P12">    </p><p class="P12">  /** the unordered list of some things that were made by this agent  */</p><p class="P12">  <span class="T5">@RDFProperty(predicate="made")</span></p><p class="P12">  private List&lt;Object&gt; thingsMade; </p><p class="P12"> </p><p class="P14">  Example from the sample Friend class.</p><p class="P14"> </p><p class="P14">  <span class="T6">/** extends the FOAF ontology to provide date of birth */</span></p><p class="P12">  <span class="T5">@RDFProperty(subPropertyOf=Constants.TEXAI_NAMESPACE + "hasAttribute", range="Person")</span></p><p class="P12">  private Date dateOfBirth;</p><p class="P14"> </p><p class="P6">Persisting An RDF Entity </p><p class="P5">RDF entities are persisted and loaded by an instance of RDFEntityManager.</p><ul style="margin-left:1.25cm;"><li class="P17" style="margin-left:0cm;"><p class="P17" style="margin-left:0.25cm;"><span class="T5">persist</span> – This method persists the given RDF entity instance as propositions in the KB.  If the RDF entity class is new, then propositions are created to define it in the KB.  The parameter is:</p></li><li class="P18" style="margin-left:1.25cm;"><p class="P18" style="margin-left:0.25cm;"><span class="T5">rdfEntity</span> – an instance of Java <span class="T5">Object</span>; the RDF entity</p></li></ul><ul style="margin-left:1.25cm;"><li class="P19" style="margin-left:1.25cm;"><p class="P19" style="margin-left:0.25cm;"> </p></li></ul><p class="P14">This method returns void. </p><p class="P5"> </p><p class="P6">RDF Entity Persistence Example</p><p class="P5">Three Java classes are defined in this sample to illustrate common semantic annotations and their use in an inheritance hierarchy.  Semantic annotations are highlighted with a bold font.  First is an annotated RDF entity class that represents an Agent in the Friend Of A Friend (FOAF) ontology:</p><p class="P5"> </p><p class="P8">package org.texai.kb.persistence.sample; </p><p class="P8"> </p><p class="P8">import java.util.Set; </p><p class="P8">import javax.persistence.Id; </p><p class="P8">import org.texai.kb.Constants; </p><p class="P8">import org.texai.kb.persistence.RDFEntity; </p><p class="P8">import org.texai.kb.persistence.RDFNamespace; </p><p class="P8">import org.texai.kb.persistence.RDFProperty; </p><p class="P8"> </p><p class="P8">/** Provides a class to represent an agent in the FOAF ontology. </p><p class="P8"> *</p><p class="P8"> * @author reed</p><p class="P8"> */</p><p class="P9">@RDFEntity( </p><p class="P9">namespaces={ </p><p class="P9">  @RDFNamespace(prefix="foaf", namespaceURI=Constants.FOAF_NAMESPACE)},</p><p class="P9">subject="foaf:Agent") </p><p class="P8">public class Agent { </p><p class="P8">  </p><p class="P8">  /** This is the URI string that identifies this person.  If null, then it is automatically generated when</p><p class="P8">   * this instance is persisted.  When a subclass is instantiated, this field is ignored. */</p><p class="P8">  <span class="T5">@Id</span></p><p class="P8">  private String agentId;</p><p class="P8">  </p><p class="P8">  /** the name of this agent  */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="foaf:name")</span></p><p class="P8">  private String name;</p><p class="P8">  </p><p class="P8">  /** the birthday of this Agent, represented in mm-dd string form, eg. '12-31'  */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="foaf:birthday")</span></p><p class="P8">  private String birthday;</p><p class="P8">  </p><p class="P8">  /** the gender of this Agent (typically but not necessarily 'male' or 'female')  */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="foaf:gender")</span></p><p class="P8">  private String gender;</p><p class="P8">  </p><p class="P8">  /** the set of some things that were made by this agent  */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="foaf:made")</span></p><p class="P8">  private Set&lt;Object&gt; thingsMade;</p><p class="P8">  </p><p class="P8">  /** Creates a new instance of Agent. RDF Entities must have a </p><ul style="margin-left:0.5cm;"><li class="P20" style="margin-left:0cm;"><p class="P20" style="margin-left:0.25cm;">* default constructor. </p><p class="P20" style="margin-left:0.25cm;">*/ </p></li></ul><p class="P8">  public Agent() {</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public String getAgentId() {</p><p class="P8">    return agentId;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public void setAgentId(final String agentId) {</p><p class="P8">    this.agentId = agentId;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public String getName() {</p><p class="P8">    return name;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public void setName(final String name) {</p><p class="P8">    this.name = name;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public String getBirthday() {</p><p class="P8">    return birthday;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public void setBirthday(final String birthday) {</p><p class="P8">    this.birthday = birthday;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public String getGender() {</p><p class="P8">    return gender;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public void setGender(final String gender) {</p><p class="P8">    this.gender = gender;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public Set&lt;Object&gt; getThingsMade() {</p><p class="P8">    return thingsMade;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public void setThingsMade(final Set&lt;Object&gt; thingsMade) {</p><p class="P8">    this.thingsMade = thingsMade;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns whether the given object is equal to this object.</p><p class="P8">   *</p><p class="P8">   * @param obj the given object</p><p class="P8">   * @return whether the given object is equal to this object</p><p class="P8">   */</p><p class="P8">  @Override</p><p class="P8">  public boolean equals(final Object obj) {</p><p class="P8">    if (obj instanceof Agent) {</p><p class="P8">      final Agent that = (Agent) obj;</p><p class="P8">      return this.getAgentId().equals(that.getAgentId());</p><p class="P8">    } else {</p><p class="P8">      return false;</p><p class="P8">    }</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns a hash code for this object.</p><p class="P8">   *</p><p class="P8">   * @return a hash code for this object</p><p class="P8">   */</p><p class="P8">  @Override</p><p class="P8">  public int hashCode() {</p><p class="P8">    if (getAgentId() == null) {</p><p class="P8">      return super.hashCode();</p><p class="P8">    } else {</p><p class="P8">      return getAgentId().hashCode();</p><p class="P8">    }</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">} </p><p class="P8"> </p><p class="P5">The second Java class defines the FOAF Person which is a subclass of FOAF Agent: </p><p class="P5"> </p><p class="P8">package org.texai.kb.persistence.sample; </p><p class="P8"> </p><p class="P8">import org.texai.kb.Constants; </p><p class="P8">import org.texai.kb.persistence.RDFEntity; </p><p class="P8">import org.texai.kb.persistence.RDFNamespace; </p><p class="P8">import org.texai.kb.persistence.RDFProperty; </p><p class="P8"> </p><p class="P8">/** Provides a class to represent a person in the FOAF ontology. </p><p class="P8"> *</p><p class="P8"> * @author reed</p><p class="P8"> */</p><p class="P9">@RDFEntity( </p><p class="P9">namespaces={ </p><p class="P9">  @RDFNamespace(prefix="foaf", namespaceURI=Constants.FOAF_NAMESPACE)},</p><p class="P9">subject="foaf:Person") </p><p class="P8">public class Person extends Agent { </p><p class="P8">  </p><p class="P8">  /** the first name of this person  */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="foaf:firstName")</span></p><p class="P8">  private String firstName;</p><p class="P8">    </p><p class="P8">  /** the family name of this person  */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="foaf:familyName")</span></p><p class="P8">  private String familyName;</p><p class="P8">    </p><p class="P8">  /** Creates a new instance of Person. The default constructor must be</p><ul style="margin-left:0.5cm;"><li class="P21" style="margin-left:0cm;"><p class="P21" style="margin-left:0.25cm;"> * present.</p><p class="P21" style="margin-left:0.25cm;"> */</p></li></ul><p class="P8">  public Person() {</p><p class="P8">  }</p><p class="P8"> </p><p class="P8">  public String getFirstName() {</p><p class="P8">    return firstName;</p><p class="P8">  }</p><p class="P8"> </p><p class="P8">  public void setFirstName(final String firstName) {</p><p class="P8">    this.firstName = firstName;</p><p class="P8">  }</p><p class="P8"> </p><p class="P8">  public String getFamilyName() {</p><p class="P8">    return familyName;</p><p class="P8">  }</p><p class="P8"> </p><p class="P8">  public void setFamilyName(final String familyName) {</p><p class="P8">    this.familyName = familyName;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns whether the given object is equal to this object.</p><p class="P8">   *</p><p class="P8">   * @param obj the given object</p><p class="P8">   * @return whether the given object is equal to this object</p><p class="P8">   */</p><p class="P8">  @Override</p><p class="P8">  public boolean equals(final Object obj) {</p><p class="P8">    if (obj instanceof Person) {</p><p class="P8">      final Person that = (Person) obj;</p><p class="P8">      return this.getAgentId().equals(that.getAgentId());</p><p class="P8">    } else {</p><p class="P8">      return false;</p><p class="P8">    }</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns a hash code for this object.</p><p class="P8">   *</p><p class="P8">   * @return a hash code for this object</p><p class="P8">   */</p><p class="P8">  @Override</p><p class="P8">  public int hashCode() {</p><p class="P8">    if (getAgentId() == null) {</p><p class="P8">      return super.hashCode();</p><p class="P8">    } else {</p><p class="P8">      return getAgentId().hashCode();</p><p class="P8">    }</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">}  </p><p class="P8"> </p><p class="P5">And the third Java class for Friend represents an extension to the FOAF ontology: </p><p class="P5"> </p><p class="P8">package org.texai.kb.persistence.sample; </p><p class="P8"> </p><p class="P8">import java.util.Date; </p><p class="P8">import java.util.Set; </p><p class="P8">import org.texai.kb.Constants; </p><p class="P8">import org.texai.kb.persistence.RDFEntity; </p><p class="P8">import org.texai.kb.persistence.RDFNamespace; </p><p class="P8">import org.texai.kb.persistence.RDFProperty; </p><p class="P8"> </p><p class="P8">/** Extends the FOAF ontology to represent a friend. </p><p class="P8"> *</p><p class="P8"> * @author reed</p><p class="P8"> */</p><p class="P9">@RDFEntity( </p><p class="P9">namespaces={ </p><p class="P9">  @RDFNamespace(prefix="texai", namespaceURI=Constants.TEXAI_NAMESPACE),</p><p class="P9">  @RDFNamespace(prefix="foaf", namespaceURI=Constants.FOAF_NAMESPACE)},</p><p class="P9">subject="texai:Friend", subClassOf="foaf:Person", context="texai:FriendContext") </p><p class="P8">// RDF entity classes must not have the final modifier. </p><p class="P8">public class Friend extends Person { </p><p class="P8">  </p><p class="P8">  /** extends the FOAF ontology to provide date of birth */</p><p class="P8">  <span class="T5">@RDFProperty(predicate="texai:dateOfBirth", subPropertyOf="texai:hasAttribute", range="foaf:Person")</span></p><p class="P8">  private Date dateOfBirth;</p><p class="P8">  </p><p class="P8">  /**</p><p class="P8">   * Creates a new Friend instance. RDF entities are required to have</p><p class="P8">   * a default (no-parameter) constructor among their constructors.</p><p class="P8">   */</p><p class="P8">  public Friend() {</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Creates a new Friend instance. RDF entities are required to have</p><p class="P8">   * a no-parameter constructor among their constructors.</p><p class="P8">   */</p><p class="P8">  public Friend(</p><p class="P8">          final String name,</p><p class="P8">          final String birthday,</p><p class="P8">          final String gender,</p><p class="P8">          final Set&lt;Object&gt; thingsMade,</p><p class="P8">          final String firstName,</p><p class="P8">          final String familyName,</p><p class="P8">          final Date dateOfBirth) {</p><p class="P8">    setName(name);</p><p class="P8">    setBirthday(birthday);</p><p class="P8">    setGender(gender);</p><p class="P8">    setThingsMade(thingsMade);</p><p class="P8">    setFirstName(firstName);</p><p class="P8">    setFamilyName(familyName);</p><p class="P8">    setDateOfBirth(dateOfBirth);</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns a string representation of this object.</p><p class="P8">   *</p><p class="P8">   * @return a string representation of this object</p><p class="P8">   */</p><p class="P8">  public String toString() {</p><p class="P8">    return "[friend: " + getName() + "]";</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public Date getDateOfBirth() {</p><p class="P8">    return dateOfBirth;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  public void setDateOfBirth(final Date dateOfBirth) {</p><p class="P8">    this.dateOfBirth = dateOfBirth;</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns whether the given object is equal to this object.</p><p class="P8">   *</p><p class="P8">   * @param obj the given object</p><p class="P8">   * @return whether the given object is equal to this object</p><p class="P8">   */</p><p class="P8">  @Override</p><p class="P8">  public boolean equals(final Object obj) {</p><p class="P8">    if (obj instanceof Friend) {</p><p class="P8">      final Friend that = (Friend) obj;</p><p class="P8">      return this.getAgentId().equals(that.getAgentId());</p><p class="P8">    } else {</p><p class="P8">      return false;</p><p class="P8">    }</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">  /** Returns a hash code for this object.</p><p class="P8">   *</p><p class="P8">   * @return a hash code for this object</p><p class="P8">   */</p><p class="P8">  @Override</p><p class="P8">  public int hashCode() {</p><p class="P8">    if (getAgentId() == null) {</p><p class="P8">      return super.hashCode();</p><p class="P8">    } else {</p><p class="P8">      return getAgentId().hashCode();</p><p class="P8">    }</p><p class="P8">  }</p><p class="P8">  </p><p class="P8">} </p><p class="P8"> </p><p class="P5">Below is a Java code snippet that creates and persists an instance object of the Friend class.</p><p class="P5"> </p><p class="P8">    rdfEntityManager.setAutoCommit(false);</p><p class="P8">    // populate the Friend</p><p class="P8">    final String name = "Stephen Reed";</p><p class="P8">    final String birthday = "09-20";</p><p class="P8">    final String gender = "male";</p><p class="P8">    final Set&lt;Object&gt; thingsMade = new HashSet&lt;Object&gt;();</p><p class="P8">    thingsMade.add(rdfEntityManager.getValueFactory().createURI("http://texai.org"));</p><p class="P8">    final String firstName = "Stephen";</p><p class="P8">    final String familyName = "Reed";</p><p class="P8">    final Date dateOfBirth = (new GregorianCalendar(1951, 9, 20, 0, 0, 0)).getTime();</p><p class="P8">    final Friend friend = new Friend(</p><p class="P8">            name,</p><p class="P8">            birthday,</p><p class="P8">            gender,</p><p class="P8">            thingsMade,</p><p class="P8">            firstName,</p><p class="P8">            familyName,</p><p class="P8">            dateOfBirth);</p><p class="P8">    </p><p class="P8">    // persist the RDF entity and commit the transaction</p><p class="P8">    rdfEntityManager.persist(friend);</p><p class="P8">    rdfEntityManager.commit();</p><p class="P8"> </p><p class="P5">As a result, here are the knowledge base assertions created when the Friend instance was persisted for the first time.</p><p class="P8"> </p><ol style="margin-left:1.25cm;list-style-type:decimal; "><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend&gt; &lt;rdf:type&gt; &lt;cyc:FirstOrderCollection&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend&gt; &lt;rdfs:subClassOf&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;rdf:type&gt; &lt;texai:Friend&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;texai:domainEntityClassName&gt; “org.texai.kb.persistence.sample.Friend” </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:dateOfBirth&gt; &lt;rdf:type&gt; &lt;owl:ObjectProperty&gt;</p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:dateOfBirth&gt; &lt;rdfs:subPropertyOf&gt; &lt;cyc:conceptuallyRelated&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:dateOfBirth&gt; &lt;rdfs:domain&gt; &lt;texai:Friend&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:dateOfBirth&gt; &lt;rdfs:range&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;texai:dateOfBirth&gt; “1951-10-20T00:00:00-06:00” </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; “Stephen Reed” </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;http://xmlns.com/foaf/0.1/firstName&gt; “Stephen”</p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;http://xmlns.com/foaf/0.1/birthday&gt; “09-20” </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;http://xmlns.com/foaf/0.1/familyName&gt; “Reed” </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;http://xmlns.com/foaf/0.1/made&gt; &lt;http://texai.org&gt; </p></li><li class="P22" style="margin-left:0cm;"><p class="P22" style="margin-left:0.25cm;">&lt;texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c&gt; &lt;http://xmlns.com/foaf/0.1/gender&gt; “male” </p></li></ol><p class="P5"> </p><p class="P6">RDF Entity Load Examples</p><p class="P5">RDF entities may be loaded by an iterator.  Below is a Java code snippet that loads an instance object of the Friend class from an iterator over all the persisted instances in the Sesame RDF store.  This snippet omits the transaction handling statements.</p><p class="P8"> </p><p class="P8">    // load via an iterator</p><p class="P8">    final Iterator friend_iter =   </p><p class="P8">      rdfEntityManager.rdfEntityIterator(Friend.class);</p><p class="P8">    final Friend friend1 = (Friend) friend_iter.next();</p><p class="P8">    System.out.println("loaded via iterator: " + friend1);</p><p class="P5"> </p><p class="P5">RDF entities may be loaded by their term id.  Below is a Java code snippet that loads an Friend instance object given its term id.  This snippet omits the transaction handling statements.</p><p class="P5"> </p><p class="P8">    // load via friend id</p><p class="P8">    final URI friendURI rdfEntityManager.getValueFactory().createURI(</p><p class="P8">      “texai:Friend_7c990ce2-bda4-4031-b4ce-c4dd07aebe4c”);</p><p class="P8">    final Friend friend2 = </p><p class="P8">      (Friend) rdfEntityManager.find(Friend.class, friendURI);</p><p class="P8">    System.out.println("loaded via URI: " + friendId + " --&gt; " + friend2);</p><p class="P8"> </p><p class="P5"> </p><p class="P5">RDF entities may be loaded by specifying a value object for an identifying property.  Below is a Java code snippet that loads an Friend instance object given the String value for the myString identifying property.  An identifying property is a functional property that has only one RDF entity associated with a unique value object.  This snippet omits the transaction handling statements.</p><p class="P8"> </p><p class="P8">    // load via identifying property value</p><p class="P8">    final URI predicate = rdfEntityManager.getValueFactory().createURI(</p><p class="P8">      "http://xmlns.com/foaf/0.1/name");</p><p class="P8">    final Value value =</p><p class="P8">      rdfEntityManager.getValueFactory().createLiteral("Stephen Reed");</p><p class="P8">    final List&lt;Object&gt; friends = </p><p class="P8">      rdfEntityManager.find(predicate, value, Friend.class);</p><p class="P8">    assert friends.size() == 1 : "friends must have size 1";</p><p class="P8">    final Friend friend3 = (Friend) friends.get(0);</p><p class="P8">    System.out.println(</p><p class="P8">      "loaded via an identifying property: " + </p><p class="P8">      value.toString() + " --&gt; " + friend3);</p><p class="P5"> </p><p class="P6">RDF Entity Update Example </p><p class="P5">RDF entities may be updated after loading them.  Below is a Java code snippet that loads an instance object of the Friend class from an iterator, and then persists the instance after modification.</p><p class="P8" /><p class="P8">    // load the friend</p><p class="P8">    final URI friendURI =</p><p class="P8">      rdfEntityManager.getValueFactory().createURI(friendId);</p><p class="P8">    Friend friend = </p><p class="P8">      (Friend) rdfEntityManager.find(Friend.class, friendURI);</p><p class="P8">    System.out.println("loaded via URI: " + friendId + " --&gt; " + friend);</p><p class="P8">    friend.setName("Stephen L. Reed");</p><p class="P8">    </p><p class="P8">    // persist the friend</p><p class="P8">    rdfEntityManager.persist(friend);</p><p class="P8">    friendId = friend.getAgentId();</p><p class="P8">     </p><p class="P8">    // reload the friend</p><p class="P8">    friend = (Friend) rdfEntityManager.find(Friend.class, friendURI);</p><p class="P8">    System.out.println("reloaded via URI: " + friendId + " --&gt; " + friend);</p><p class="P5"> </p><p class="P6">RDF Entity Removal Example </p><p class="P5">RDF entities may be removed after loading them.  Below is a Java code snippet that persists a new instance object of the Friend class, and then removes the instance after reloading it.</p><p class="P8"> </p><p class="P8">    // load the friend</p><p class="P8">    final URI friendURI =</p><p class="P8">      rdfEntityManager.getValueFactory().createURI(friendId);</p><p class="P8">    Friend friend = </p><p class="P8">      (Friend) rdfEntityManager.find(Friend.class, friendURI);</p><p class="P8">    System.out.println("loaded via URI: " + friendId + " --&gt; " + friend);</p><p class="P8">    friend.setName("Stephen L. Reed");</p><p class="P8">    </p><p class="P8">    // remove the friend and commit the transaction</p><p class="P8">    friendId = friend.getAgentId();</p><p class="P8">    rdfEntityManager.remove(friend);</p><p class="P8">    rdfEntityManager.commit();</p><p class="P8">    </p><p class="P8">    // attempt to load the friend</p><p class="P8">    friend = (Friend) rdfEntityManager.find(Friend.class, friendURI);</p><p class="P8">    if (friend == null) {</p><p class="P8">      System.out.println("as expected, cannot load a removed entity via URI: " + friendId);</p><p class="P8">    } else {</p><p class="P8">      System.out.println("error, loaded a removed entity via URI: " + friendId + " --&gt; " + friend);</p><p class="P8">    }</p><p class="P5"> </p><p class="P6">References </p><p class="P6"> </p><p class="P7"><span class="T2">OpenRDF Sesame - </span><a href="http://openrdf.org/"><span class="T3">http://openrdf.org/</span></a></p><p class="P6"> </p><p class="P23"><span class="T7">OpenCyc – </span><a href="http://www.opencyc.org/"><span class="T8">http://www.opencyc.org</span></a></p><p class="P5"> </p><p class="P23"><span class="T7">WordNet – WordNet a lexical database for the English language </span><a href="http://wordnet.princeton.edu/"><span class="T8">http://wordnet.princeton.edu</span></a></p><p class="P5"> </p><p class="P23"><span class="T7">Java Persistence API</span><span class="T7"> - The Java Persistence API - A Simpler Programming Model for Entity Persistence  </span><a href="http://java.sun.com/developer/technicalArticles/J2EE/jpa"><span class="T8">http://java.sun.com/developer/technicalArticles/J2EE/jpa</span></a><span class="T7"> </span></p><p class="P5"> </p><p class="P23"><span class="T7">Texai – </span><a href="http://sf.net/projects/texai"><span class="T8">http://sf.net/projects/texai</span></a></p><p class="P5"> </p><p class="P6">Java Source Code and Examples </p><p class="P23"><span class="T7">Texai subversion (version control) repository - </span><a href="http://texai.svn.sourceforge.net/viewvc/texai"><span class="T8">http://texai.svn.sourceforge.net/viewvc/texai</span></a></p><p class="P5"> </p><p class="P23"> </p><p class="P23"> </p></body></html>